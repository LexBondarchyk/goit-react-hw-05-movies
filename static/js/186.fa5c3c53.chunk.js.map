{"version":3,"file":"static/js/186.fa5c3c53.chunk.js","mappings":"+SAGMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EACM,uBADNA,EAES,gBAFTA,EAGU,SAHVA,EAIU,WAJVA,EAKU,WAGHC,EAAS,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,SACLH,EAAAA,EAAAA,IAAA,UACbC,EADa,oBACkBF,EADlB,iBACkCI,EADlC,wCADK,cACjBC,EADiB,yBAIhBA,EAAIC,KAAKC,SAJO,2CAAH,qDAOTC,EAAY,mCAAG,WAAOC,GAAP,4FAAcL,EAAd,+BAAqB,EAArB,SACRH,EAAAA,EAAAA,IAAA,UACbC,EADa,oBACqBF,EADrB,iBACqCI,EADrC,kBACmDK,EADnD,wCADQ,cACpBJ,EADoB,yBAKnBA,EAAIC,KAAKC,SALU,2CAAH,sDAQZG,EAAkB,mCAAG,WAAMC,GAAN,uFACdV,EAAAA,EAAAA,IAAA,UACbC,EADa,YACcS,EADd,oBAC4BX,EAD5B,oBADc,cAC1BK,EAD0B,yBAKzBA,EAAIC,MALqB,2CAAH,sDAQlBM,EAAkB,mCAAG,WAAMD,GAAN,uFACdV,EAAAA,EAAAA,IAAA,iBACNU,GADM,OACDT,EADC,oBACkCF,EADlC,oBADc,cAC1BK,EAD0B,yBAKzBA,EAAIC,KAAKO,MALgB,2CAAH,sDASlBC,EAAkB,mCAAG,WAAOH,GAAP,4FAAWP,EAAX,+BAAkB,EAAlB,SACdH,EAAAA,EAAAA,IAAA,iBACNU,GADM,OACDT,EADC,oBACkCF,EADlC,gCACiEI,IAFnD,cAC1BC,EAD0B,yBAKzBA,EAAIC,KAAKC,SALgB,2CAAH,qD,2HCM/B,UA/CgB,WACd,OAA8BQ,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMd,GAAN,uFAEjBQ,GAAW,GAFM,UAGCL,EAAAA,EAAAA,IAAmBQ,GAHpB,OAIE,KADbjB,EAHW,QAITqB,QACNC,IAAAA,OAAAA,QAAwB,qBAE1BV,EAAWZ,GAPM,gDASjBgB,EAAS,kCATQ,yBAWjBF,GAAW,GAXM,4EAAH,sDAclBM,EAAaH,EACd,GAAE,CAACA,KAGF,gCACGJ,EAAUS,IAAAA,QAAAA,QAA2BA,IAAAA,QAAAA,SACjCP,GAASO,IAAAA,OAAAA,QAAA,UAA2BP,IACtCJ,IACC,wBACGA,EAAQY,KAAI,gBAAGjB,EAAH,EAAGA,GAAIkB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,yBACE,4BACE,uBAAID,KACJ,uBAAIC,QAHCnB,EADE,QAYxB,C","sources":["Api/api.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst API_KEY = 'e744dd987f832ad945563dbad49387aa';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst END_POINTS = {\n  trending: '/trending/movie/week',\n  querySearch: '/search/movie',\n  movieDetails: '/movie',\n  movieCredits: '/credits',\n  movieReviews: '/reviews',\n};\n\nexport const getMovies = async (page = 1) => {\n  const res = await axios.get(\n    `${END_POINTS.trending}?api_key=${API_KEY}&page=${page}&language=en-US&include_adult=false`\n  );\n  return res.data.results;\n};\n\nexport const fetchByQuery = async (query, page = 1) => {\n  const res = await axios.get(\n    `${END_POINTS.querySearch}?api_key=${API_KEY}&page=${page}&query=${query}&language=en-US&include_adult=false`\n  );\n\n  return res.data.results;\n};\n\nexport const fetchMoviesDetails = async id => {\n  const res = await axios.get(\n    `${END_POINTS.movieDetails}/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return res.data;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const res = await axios.get(\n    `/movie/${id}${END_POINTS.movieCredits}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return res.data.cast;\n};\n\n\nexport const fetchMoviesReviews = async (id, page = 1) => {\n  const res = await axios.get(\n    `/movie/${id}${END_POINTS.movieReviews}?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n\n  return res.data.results;\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesReviews } from 'Api/api';\nimport Notiflix from 'notiflix';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n\n  useEffect(() => {\n    const fetchReviews = async id => {\n      try {\n        setLoading(true) \n        const res = await fetchMoviesReviews(movieId);\n        if (res.length === 0 ) {\n          Notiflix.Notify.failure('No found reviews!');\n        }\n        setReviews(res);\n      } catch (error) {\n        setError('Ooops. Something went wrong...');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? Notiflix.Loading.pulse() : Notiflix.Loading.remove()}\n          {error && Notiflix.Notify.failure(`${error}`)}\n        {reviews &&\n          <ul>\n            {reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <div>\n                  <p>{author}</p>\n                  <p>{content}</p>\n                </div>\n              </li>\n             ))}\n          </ul>\n    }\n  </>\n  );\n};\n\n\n\nexport default Reviews;\n"],"names":["API_KEY","axios","END_POINTS","getMovies","page","res","data","results","fetchByQuery","query","fetchMoviesDetails","id","fetchMoviesCredits","cast","fetchMoviesReviews","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchReviews","length","Notiflix","map","author","content"],"sourceRoot":""}