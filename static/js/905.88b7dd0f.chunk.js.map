{"version":3,"file":"static/js/905.88b7dd0f.chunk.js","mappings":"+SAGMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EACM,uBADNA,EAES,gBAFTA,EAGU,SAHVA,EAIU,WAJVA,EAKU,WAGHC,EAAS,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,SACLH,EAAAA,EAAAA,IAAA,UACbC,EADa,oBACkBF,EADlB,iBACkCI,EADlC,wCADK,cACjBC,EADiB,yBAIhBA,EAAIC,KAAKC,SAJO,2CAAH,qDAOTC,EAAY,mCAAG,WAAOC,GAAP,4FAAcL,EAAd,+BAAqB,EAArB,SACRH,EAAAA,EAAAA,IAAA,UACbC,EADa,oBACqBF,EADrB,iBACqCI,EADrC,kBACmDK,EADnD,wCADQ,cACpBJ,EADoB,yBAKnBA,EAAIC,KAAKC,SALU,2CAAH,sDAQZG,EAAkB,mCAAG,WAAMC,GAAN,uFACdV,EAAAA,EAAAA,IAAA,UACbC,EADa,YACcS,EADd,oBAC4BX,EAD5B,oBADc,cAC1BK,EAD0B,yBAKzBA,EAAIC,MALqB,2CAAH,sDAQlBM,EAAkB,mCAAG,WAAMD,GAAN,uFACdV,EAAAA,EAAAA,IAAA,iBACNU,GADM,OACDT,EADC,oBACkCF,EADlC,oBADc,cAC1BK,EAD0B,yBAKzBA,EAAIC,KAAKO,MALgB,2CAAH,sDASlBC,EAAkB,mCAAG,WAAOH,GAAP,4FAAWP,EAAX,+BAAkB,EAAlB,SACdH,EAAAA,EAAAA,IAAA,iBACNU,GADM,OACDT,EADC,oBACkCF,EADlC,gCACiEI,IAFnD,cAC1BC,EAD0B,yBAKzBA,EAAIC,KAAKC,SALgB,2CAAH,qD,2CChB/B,IA3BkB,SAAC,GAA8B,IAA5BQ,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAG3B,OACE,+BACE,wBACGD,EAAOE,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaR,GAAMS,MAAO,CAAEC,KAAML,GAA1C,UAEE,wBAAKE,OAHAP,EADC,OAWnB,C,gFCnBD,EAAwB,wB,+DCOT,SAASW,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOR,EAAP,KAAeS,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,MAGAC,EAAAA,EAAAA,YAAU,WAEND,GAAW,IACXzB,EAAAA,EAAAA,MACG2B,MAAK,SAAAvB,GACJiB,EAAUjB,EACX,IACAwB,OAAM,SAAAN,GACLC,EAAS,iCACT,IACDM,SAAQ,kBAAMJ,GAAW,EAAjB,GAGd,GAAE,IAEH,IAAMK,GAAcN,IAAYZ,EAAOmB,OACvC,OACE,+BACE,4BACE,eAAIC,UAAWC,EAAf,6BACET,GAAWU,IAAAA,QAAAA,UACXV,GAAWU,IAAAA,QAAAA,SACZJ,IAAc,SAACK,EAAA,EAAD,IACdb,GAASY,IAAAA,OAAAA,QAAA,UAA2BZ,IACpCV,IAAU,SAACwB,EAAA,EAAD,CAAWxB,OAAQA,QAIrC,C,2ECxCc,SAASuB,IACtB,OACE,yDAC6B,SAAC,KAAD,CAAMnB,GAAG,IAAT,uBAA8B,MAG9D,C","sources":["Api/api.jsx","components/Movies/MovieList.jsx","webpack://react-homework-template/./src/components/pages/HomePage/HomePage.module.css?fc24","components/pages/HomePage/HomePage.jsx","components/pages/NotFoundPage/NotFoundView.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst API_KEY = 'e744dd987f832ad945563dbad49387aa';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst END_POINTS = {\n  trending: '/trending/movie/week',\n  querySearch: '/search/movie',\n  movieDetails: '/movie',\n  movieCredits: '/credits',\n  movieReviews: '/reviews',\n};\n\nexport const getMovies = async (page = 1) => {\n  const res = await axios.get(\n    `${END_POINTS.trending}?api_key=${API_KEY}&page=${page}&language=en-US&include_adult=false`\n  );\n  return res.data.results;\n};\n\nexport const fetchByQuery = async (query, page = 1) => {\n  const res = await axios.get(\n    `${END_POINTS.querySearch}?api_key=${API_KEY}&page=${page}&query=${query}&language=en-US&include_adult=false`\n  );\n\n  return res.data.results;\n};\n\nexport const fetchMoviesDetails = async id => {\n  const res = await axios.get(\n    `${END_POINTS.movieDetails}/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return res.data;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const res = await axios.get(\n    `/movie/${id}${END_POINTS.movieCredits}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return res.data.cast;\n};\n\n\nexport const fetchMoviesReviews = async (id, page = 1) => {\n  const res = await axios.get(\n    `/movie/${id}${END_POINTS.movieReviews}?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n\n  return res.data.results;\n};\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst MovieList = ({ movies, prevLocation }) => {\n\n\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: prevLocation }}>\n              {}\n              <h3>{title}</h3>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default MovieList;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"HomePage_title__Pdvr1\"};","import styles from './HomePage.module.css';\nimport MovieList from 'components/Movies/MovieList';\nimport { useEffect, useState } from 'react';\nimport { getMovies } from 'Api/api';\nimport NotFoundView from 'components/pages/NotFoundPage/NotFoundView';\nimport Notiflix from 'notiflix';\n\n\nexport default function GetTrendingMovies() {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n \n\n  useEffect(() => {\n    const fetchTrendingMovies = () => {\n      setLoading(true);\n      getMovies()\n        .then(results => {\n          setMovies(results);\n        })\n        .catch(error => {\n          setError('Ooops. Something went wrong...');\n         })\n        .finally(() => setLoading(false));\n    };\n    fetchTrendingMovies();\n  }, []);\n\n  const isNotFound = !loading && !movies.length;\n  return (\n    <>\n      <div>\n        <h1 className={styles.title}>Trending Movies</h1>\n        {(loading && Notiflix.Loading.pulse()) ||\n        (!loading && Notiflix.Loading.remove())}\n        {isNotFound && <NotFoundView />}\n        {error && Notiflix.Notify.failure(`${error}`)}\n        {movies && <MovieList movies={movies} />}\n      </div>\n    </>\n  );\n}\n","import { Link } from 'react-router-dom';\n\nexport default function NotFoundView() {\n  return (\n    <h1>\n      Page is not found :( Go to <Link to=\"/\">Home page</Link>{' '}\n    </h1>\n  );\n}\n"],"names":["API_KEY","axios","END_POINTS","getMovies","page","res","data","results","fetchByQuery","query","fetchMoviesDetails","id","fetchMoviesCredits","cast","fetchMoviesReviews","movies","prevLocation","map","title","to","state","from","GetTrendingMovies","useState","setMovies","error","setError","loading","setLoading","useEffect","then","catch","finally","isNotFound","length","className","styles","Notiflix","NotFoundView","MovieList"],"sourceRoot":""}